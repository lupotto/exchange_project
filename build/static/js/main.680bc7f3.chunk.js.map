{"version":3,"sources":["helpers.js","store/selectors.js","components/Navbar.js","store/actions.js","store/interactions.js","components/Spinner.js","components/Trades.js","components/OrderBook.js","components/MyTransactions.js","components/PriceChart.config.js","components/PriceChart.js","components/Balance.js","components/NewOrder.js","components/Content.js","components/App.js","store/reducers.js","store/configureStore.js","reportWebVitals.js","index.js"],"names":["ETHER_ADDRESS","GREEN","RED","DECIMALS","ether","wei","tokens","formatBalance","balance","Math","round","account","state","get","accountSelector","createSelector","a","web3Selector","t","tokenLoaded","exchangeLoaded","tl","exchangeSelector","el","e","tokenSelector","contractsLoadedSelector","cancelledOrdersLoaded","cancelledOrders","loaded","filledOrdersLoaded","o","filledOrdersLoadedSelector","filledOrders","filledOrdersSelector","orders","sort","b","timestamp","decorateFilledOrders","previousOrder","map","order","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","tokenPrice","formattedTimestamp","moment","unix","format","tokenPriceClass","id","orderId","openOrders","all","allOrders","filled","cancelled","reject","orderFilled","some","orderCancelled","orderBookLoaded","allOrdersLoaded","orderBookLoadedSelector","orderBookSelector","decorateOrderBookOrders","groupBy","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillAction","myFilledOrdersLoadedSelector","myFilledOrdersSelector","filter","user","userFill","decorateMyFilledOrders","decorateMyFilledOrder","orderSign","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","decorateMyOpenOrder","priceChartLoadedSelector","priceChartSelector","secondLastOrder","lastOrder","slice","length","lastPrice","lastPriceChange","series","data","buildGraphData","startOf","Object","keys","hour","group","open","high","maxBy","low","minBy","close","Date","orderCancellingSelector","status","orderFillingSelector","balancesLoadingSelector","etherBalanceSelector","tokenBalanceSelector","exchangeEtherBalanceSelector","exchangeTokenBalanceSelector","etherDepositAmountSelector","amount","etherWithdrawAmountSelector","tokenDepositAmountSelector","tokenWithdrawAmountSelector","buyOrderSelector","sellOrderSelector","Navbar","Component","render","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","this","props","target","rel","connect","web3AccountLoaded","tokenBalanceLoaded","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","loadWeb3","dispatch","window","ethereum","web3","Web3","connection","alert","location","assign","loadAccount","eth","getAccounts","accounts","loadToken","networkId","token","Contract","Token","abi","networks","address","contract","console","log","loadExchange","exchange","Exchange","loadAllOrders","getPastEvents","fromBlock","toBlock","cancelStream","event","returnValues","tradeStream","orderStream","subscribeToEvents","events","Cancel","error","Trade","Deposit","Withdraw","Order","loadBalances","getBalance","etherBalance","methods","balanceOf","call","tokenBalance","exchangeEtherBalance","options","exchangeTokenBalance","Trades","key","Spinner","renderOrder","OverlayTrigger","placement","overlay","Tooltip","onClick","fillOrder","send","from","on","hash","OrderBook","showOrderBook","orderBook","orderFilling","showMyOpenOrders","myOpenOrders","cancelOrder","MyTransactions","Tabs","defaultActiveKey","Tab","eventKey","title","showMyFilledOrders","myFilledOrders","myOpenOrdersLoaded","orderCancelling","chartOptions","chart","animations","enabled","toolbar","show","width","tooltip","theme","style","fontSize","fontFamily","undefined","x","formatter","y","marker","items","display","fixed","position","offsetX","offsetY","xaxis","labels","colors","cssClass","yaxis","minWidth","maxWidth","color","rotate","showPriceChart","priceChart","output","priceSymbol","height","PriceChart","priceChartLoaded","showForm","etherDepositAmount","etherWithdrawAmount","tokenDepositAmount","tokenWithdrawAmount","onSubmit","preventDefault","depositEther","value","utils","toWei","placeholder","onChange","required","approve","depositToken","withdrawEther","withdrawToken","Balance","componentWillMount","loadBlockchainData","balancesLoading","buyOrder","sellOrder","showBuyTotal","showSellTotal","tokenGet","price","toString","makeOrder","makeBuyOrder","makeSellOrder","NewOrder","making","Content","componentDidMount","App","net","getId","contractsLoaded","rootReducer","combineReducers","action","index","findIndex","loggerMiddleware","createLogger","middleware","composeEnhancers","_REDUX_DEVTOOLS_EXTENSION_COMPOSE_","compose","reportWebVitals","preLoadedState","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","store","createStore","applyMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.680bc7f3.chunk.js","sourcesContent":["export const ETHER_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GREEN = 'success'\nexport const RED = 'danger'\n\nexport const DECIMALS = (10**18)\n\n//Shortcut to avoid passing around web3 connection\nexport const ether = (wei) => {\n  if(wei){\n    return(wei / DECIMALS) //18 decimal places\n  }\n}\n\n//Tokens and ether have same decimal resolution\nexport const tokens = ether\n\nexport const formatBalance = (balance) => {\n  const precision = 100 // 2 decimal places\n  balance = ether(balance)\n  balance = Math.round(balance * precision) / precision\n  return balance\n}\n","import { get, groupBy, reject, maxBy, minBy } from 'lodash'\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether, formatBalance } from '../helpers'\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, t => t)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nexport const contractsLoadedSelector = createSelector(\n  tokenLoaded,\n  exchangeLoaded,\n  (tl, el) => (tl && el)\n)\n\n// All Orders\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\n\n// Cancelled orders\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\n\n// Filled Orders\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\nexport const filledOrdersSelector = createSelector(\n  filledOrders,\n  (orders) => {\n    // Sort orders by date ascending for price comparison\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate the orders\n    orders = decorateFilledOrders(orders)\n    // Sort orders by date descending for display\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n    return orders\n  }\n)\n\nconst decorateFilledOrders = (orders) => {\n  // Track previous order to compare history\n  let previousOrder = orders[0]\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateFilledOrder(order, previousOrder)\n      previousOrder = order // Update the previous order once it's decorated\n      return order\n    })\n  )\n}\n\nconst decorateOrder = (order) => {\n  let etherAmount\n  let tokenAmount\n\n  if(order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive\n    tokenAmount = order.amountGet\n  } else {\n    etherAmount = order.amountGet\n    tokenAmount = order.amountGive\n  }\n\n  // Calculate token price to 5 decimal places\n  const precision = 100000\n  let tokenPrice = (etherAmount / tokenAmount)\n  tokenPrice = Math.round(tokenPrice * precision) / precision\n\n  return({\n    ...order,\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  })\n}\n\nconst decorateFilledOrder = (order, previousOrder) => {\n  return({\n    ...order,\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n  })\n}\n\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n  // Show green price if only one order exists\n  if(previousOrder.id === orderId) {\n    return GREEN\n  }\n\n  // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n  if(previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN // success\n  } else {\n    return RED // danger\n  }\n}\n\nconst openOrders = state => {\n  const all = allOrders(state)\n  const filled = filledOrders(state)\n  const cancelled = cancelledOrders(state)\n\n  const openOrders = reject(all, (order) => {\n    const orderFilled = filled.some((o) => o.id === order.id)\n    const orderCancelled = cancelled.some((o) => o.id === order.id)\n    return(orderFilled || orderCancelled)\n  })\n\n  return openOrders\n}\n\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\n// Create the order book\nexport const orderBookSelector = createSelector(\n  openOrders,\n  (orders) => {\n    // Decorate orders\n    orders = decorateOrderBookOrders(orders)\n    // Group orders by \"orderType\"\n    orders = groupBy(orders, 'orderType')\n    // Fetch buy orders\n    const buyOrders = get(orders, 'buy', [])\n    // Sort buy orders by token price\n    orders = {\n      ...orders,\n      buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n    }\n    // Fetch sell orders\n    const sellOrders = get(orders, 'sell', [])\n    // Sort sell orders by token price\n    orders = {\n      ...orders,\n      sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n    }\n    return orders\n  }\n)\n\nconst decorateOrderBookOrders = (orders) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateOrderBookOrder(order)\n      return(order)\n    })\n  )\n}\n\nconst decorateOrderBookOrder = (order) => {\n  const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n    orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n  })\n}\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const myFilledOrdersSelector = createSelector(\n  account,\n  filledOrders,\n  (account, orders) => {\n    // Find our orders\n    orders = orders.filter((o) => o.user === account || o.userFill === account)\n    // Sort by date ascending\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate orders - add display attributes\n    orders = decorateMyFilledOrders(orders, account)\n    return orders\n  }\n)\n\nconst decorateMyFilledOrders = (orders, account) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateMyFilledOrder(order, account)\n      return(order)\n    })\n  )\n}\n\nconst decorateMyFilledOrder = (order, account) => {\n  const myOrder = order.user === account\n\n  let orderType\n  if(myOrder) {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  } else {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n  }\n\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n    orderSign: (orderType === 'buy' ? '+' : '-')\n  })\n}\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\nexport const myOpenOrdersSelector = createSelector(\n  account,\n  openOrders,\n  (account, orders) => {\n    // Filter orders created by current account\n    orders = orders.filter((o) => o.user === account)\n    // Decorate orders - add display attributes\n    orders = decorateMyOpenOrders(orders)\n    // Sort orders by date descending\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n    return orders\n  }\n)\n\nconst decorateMyOpenOrders = (orders, account) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateMyOpenOrder(order, account)\n      return(order)\n    })\n  )\n}\n\nconst decorateMyOpenOrder = (order, account) => {\n  let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n  })\n}\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const priceChartSelector = createSelector(\n  filledOrders,\n  (orders) => {\n    //order by timestamp ascending\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    //decorate orders\n    orders = orders.map((o) => decorateOrder(o))\n    //Get last 2 orders for final price & price change\n    let secondLastOrder, lastOrder\n    [secondLastOrder, lastOrder] = orders.slice(orders.length - 2 , orders.length) //takes last 2 elments of the array\n    //get last ordr price\n    const lastPrice = get(lastOrder, 'tokenPrice', 0)\n    //get second last order price\n    const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\n\n  return({\n    lastPrice,\n    lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\n    series: [{\n      data: buildGraphData(orders)\n    }]\n  })\n  }\n)\n\nconst buildGraphData = (orders) => {\n  //Group the orders by hour\n  orders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour').format())\n  //Get each order where data exists\n  const hours = Object.keys(orders)\n  //Build the graph series\n  const graphData = hours.map((hour) => {\n  //Fetch all the orders from current hour\n  const group = orders[hour]\n  //Calculate price values - open, high, low, close\n  const open = group[0] //first order\n  const high = maxBy(group, 'tokenPrice')//high price\n  const low = minBy(group, 'tokenPrice') //low price\n  const close = group[group.length - 1] //last order\n\n\n    return({\n      'x': new Date(hour),\n      'y': [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    })\n  })\n  return graphData\n}\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false)\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\n\n//BALANCES\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\n\nconst etherBalance = state => get(state, 'web3.balance', 0)\nexport const etherBalanceSelector = createSelector(\n  etherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst tokenBalance = state => get(state, 'token.balance', 0)\nexport const tokenBalanceSelector = createSelector(\n  tokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\nexport const exchangeEtherBalanceSelector = createSelector(\n  exchangeEtherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\nexport const exchangeTokenBalanceSelector = createSelector(\n  exchangeTokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\nexport const buyOrderSelector = createSelector(buyOrder, order => order)\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\nexport const sellOrderSelector = createSelector(sellOrder, order => order)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { accountSelector } from '../store/selectors'\n\nclass Navbar extends Component {\n  render(){\n    return(\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <a className=\"navbar-brand\" href=\"/#\">ALEX Token Exchange</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <ul className=\"navbar-nav ml-auto\">\n        <li className=\"nav-item\">\n          <a\n            className=\"nav-link small\"\n            href={`https://etherscan.io/address/${this.props.account}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n           {this.props.account}\n          </a>\n        </li>\n      </ul>\n    </nav>\n  )\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n   account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar)\n","export function web3Loaded(connection) {\n  return {\n    type: 'WEB3_LOADED',\n    connection:connection\n  }\n}\n//WEB3\nexport function web3AccountLoaded(account) {\n  return {\n    type: 'WEB3_ACCOUNT_LOADED',\n    account:account\n  }\n}\n//TOKEN\nexport function tokenLoaded(contract) {\n  return {\n    type: 'TOKEN_LOADED',\n    contract: contract\n  }\n}\n//EXCHANGE\nexport function exchangeLoaded(contract) {\n  return {\n    type: 'EXCHANGE_LOADED',\n    contract: contract\n  }\n}\n//Cancelled orders\nexport function cancelledOrdersLoaded(cancelledOrders){\n  return {\n    type: 'CANCELLED_ORDERS_LOADED',\n    cancelledOrders: cancelledOrders\n  }\n}\n//Filled orders\nexport function filledOrdersLoaded(filledOrders){\n  return {\n    type: 'FILLED_ORDERS_LOADED',\n    filledOrders: filledOrders\n  }\n}\n\n//All orders\nexport function allOrdersLoaded(allOrders){\n  return {\n    type: 'ALL_ORDERS_LOADED',\n    allOrders: allOrders\n  }\n}\n\n//All orders\nexport function orderCancelling(){\n  return {\n    type: 'ORDER_CANCELLING'\n  }\n}\n\n//Cancelled order\nexport function orderCancelled(order){\n  return {\n    type: 'ORDER_CANCELLED',\n    order: order\n  }\n}\n\n//All orders\nexport function orderFilling(){\n  return {\n    type: 'ORDER_FILLING'\n  }\n}\n\n//Cancelled order\nexport function orderFilled(order){\n  return {\n    type: 'ORDER_FILLED',\n    order: order\n  }\n}\n\n//Balances\nexport function etherBalanceLoaded(balance){\n  return {\n    type: 'ETHER_BALANCE_LOADED',\n    balance: balance\n  }\n}\n\n//Balances\nexport function tokenBalanceLoaded(balance){\n  return {\n    type: 'TOKEN_BALANCE_LOADED',\n    balance: balance\n  }\n}\n\n//Balances\nexport function exchangeEtherBalanceLoaded(balance){\n  return {\n    type: 'EXCHANGE_ETHER_BALANCE_LOADED',\n    balance: balance\n  }\n}\n\nexport function exchangeTokenBalanceLoaded(balance){\n  return {\n    type: 'EXCHANGE_TOKEN_BALANCE_LOADED',\n    balance: balance\n  }\n}\n\nexport function balancesLoaded(){\n  return {\n    type: 'BALANCES_LOADED'\n  }\n}\n\nexport function balancesLoading(){\n  return {\n    type: 'BALANCES_LOADING'\n  }\n}\n\nexport function etherDepositAmountChanged(amount){\n  return {\n    type: 'ETHER_DEPOSIT_AMOUNT_CHANGED',\n    amount: amount\n  }\n}\n\nexport function etherWithdrawAmountChanged(amount){\n  return {\n    type: 'ETHER_WITHDRAW_AMOUNT_CHANGED',\n    amount: amount\n  }\n}\n\nexport function tokenDepositAmountChanged(amount){\n  return {\n    type: 'TOKEN_DEPOSIT_AMOUNT_CHANGED',\n    amount: amount\n  }\n}\n\nexport function tokenWithdrawAmountChanged(amount){\n  return {\n    type: 'TOKEN_WITHDRAW_AMOUNT_CHANGED',\n    amount: amount\n  }\n}\n\n\n// Buy Order\nexport function buyOrderAmountChanged(amount) {\n  return {\n    type: 'BUY_ORDER_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function buyOrderPriceChanged(price) {\n  return {\n    type: 'BUY_ORDER_PRICE_CHANGED',\n    price\n  }\n}\n\nexport function buyOrderMaking(price) {\n  return {\n    type: 'BUY_ORDER_MAKING'\n  }\n}\n\n// Generic Order\nexport function orderMade(order) {\n  return {\n    type: 'ORDER_MADE',\n    order\n  }\n}\n\n// Sell Order\nexport function sellOrderAmountChanged(amount) {\n  return {\n    type: 'SELL_ORDER_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function sellOrderPriceChanged(price) {\n  return {\n    type: 'SELL_ORDER_PRICE_CHANGED',\n    price\n  }\n}\n\nexport function sellOrderMaking(price) {\n  return {\n    type: 'SELL_ORDER_MAKING'\n  }\n}\n","import Web3 from 'web3'\nimport {\n  web3Loaded,\n  web3AccountLoaded,\n  tokenLoaded,\n  exchangeLoaded,\n  cancelledOrdersLoaded,\n  filledOrdersLoaded,\n  allOrdersLoaded,\n  orderCancelling,\n  orderCancelled,\n  orderFilling,\n  orderFilled,\n  etherBalanceLoaded,\n  tokenBalanceLoaded,\n  exchangeEtherBalanceLoaded,\n  exchangeTokenBalanceLoaded,\n  balancesLoaded,\n  balancesLoading,\n  buyOrderMaking,\n  sellOrderMaking,\n  orderMade\n} from './actions'\n\nimport {ETHER_ADDRESS} from '../helpers'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\n\nexport const loadWeb3 = async (dispatch) => {\n  if(typeof window.ethereum!=='undefined'){\n    const web3 = new Web3(window.ethereum)\n    dispatch(web3Loaded(web3))\n    return web3\n  } else {\n    window.alert('Please install MetaMask')\n    window.location.assign(\"https://metamask.io/\")\n  }\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts()\n  const account = await accounts[0]\n  if(typeof account !== 'undefined'){\n    dispatch(web3AccountLoaded(account))\n    return account\n  } else {\n    window.alert('Please login with MetaMask')\n    return null\n  }\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n    dispatch(tokenLoaded(token))\n    return token\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n    dispatch(exchangeLoaded(exchange))\n    return exchange\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadAllOrders = async (exchange, dispatch) => {\n  // Fetch cancelled orders with the \"Cancel\" event stream\n  const cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' })\n  // Format cancelled orders\n  const cancelledOrders = cancelStream.map((event) => event.returnValues)\n  // Add cancelled orders to the redux store\n  dispatch(cancelledOrdersLoaded(cancelledOrders))\n\n  // Fetch filled orders with the \"Trade\" event stream\n  const tradeStream = await exchange.getPastEvents('Trade', { fromBlock: 0, toBlock: 'latest' })\n  // Format filled orders\n  const filledOrders = tradeStream.map((event) => event.returnValues)\n  // Add cancelled orders to the redux store\n  dispatch(filledOrdersLoaded(filledOrders))\n\n  // Load order stream\n  const orderStream = await exchange.getPastEvents('Order', { fromBlock: 0,  toBlock: 'latest' })\n  // Format order stream\n  const allOrders = orderStream.map((event) => event.returnValues)\n  // Add open orders to the redux store\n  dispatch(allOrdersLoaded(allOrders))\n}\n\nexport const subscribeToEvents = async (exchange, dispatch) => {\n  exchange.events.Cancel({}, (error, event) => {\n    dispatch(orderCancelled(event.returnValues))\n  })\n\n  exchange.events.Trade({}, (error, event) => {\n    dispatch(orderFilled(event.returnValues))\n  })\n\n  exchange.events.Deposit({}, (error, event) => {\n    dispatch(balancesLoaded())\n  })\n\n  exchange.events.Withdraw({}, (error, event) => {\n    dispatch(balancesLoaded())\n  })\n\n  exchange.events.Order({}, (error, event) => {\n    dispatch(orderMade(event.returnValues))\n  })\n}\n\nexport const cancelOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.cancelOrder(order.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n     dispatch(orderCancelling())\n  })\n  .on('error', (error) => {\n    console.log(error)\n    window.alert('There was an error!')\n  })\n}\n\nexport const fillOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.fillOrder(order.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n     dispatch(orderFilling())\n  })\n  .on('error', (error) => {\n    console.log(error)\n    window.alert('There was an error!')\n  })\n}\n\nexport const loadBalances = async (dispatch, web3, exchange, token, account) => {\n  if(typeof account !== 'undefined'){\n    // Ether balance in wallet\n    const etherBalance = await web3.eth.getBalance(account)\n    dispatch(etherBalanceLoaded(etherBalance))\n\n    // Token balance in wallet\n    const tokenBalance = await token.methods.balanceOf(account).call()\n    dispatch(tokenBalanceLoaded(tokenBalance))\n\n    // Ether balance in exchange\n   const exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call()\n   dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance))\n\n   // Token balance in exchange\n   const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call()\n   dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance))\n\n    // Trigger all balances loaded\n    dispatch(balancesLoaded())\n  } else{\n    window.alert('Please login with MetaMask')\n  }\n}\n\nexport const depositEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods.depositEther().send({ from: account,  value: web3.utils.toWei(amount, 'ether') })\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\nexport const withdrawEther =  (dispatch, exchange, web3, amount, account) => {\n  exchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({from:account})\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const depositToken =  (dispatch, exchange, web3, token, amount, account) => {\n  amount = web3.utils.toWei(amount, 'ether')\n\n  token.methods.approve(exchange.options.address, amount).send({ from: account })\n  .on('transactionHash', (hash) => {\n    exchange.methods.depositToken(token.options.address, amount).send({from:account})\n    .on('transactionHash', (hash) => {\n      dispatch(balancesLoading())\n    })\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const withdrawToken =  (dispatch, exchange, web3, token, amount, account) => {\n  exchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({from:account})\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const makeBuyOrder = (dispatch, exchange, token, web3, order, account) => {\n  const tokenGet = token.options.address\n  const amountGet = web3.utils.toWei(order.amount, 'ether')\n  const tokenGive = ETHER_ADDRESS\n  const amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\n\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(buyOrderMaking())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const makeSellOrder = (dispatch, exchange, token, web3, order, account) => {\n  const tokenGet = ETHER_ADDRESS\n  const amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\n  const tokenGive = token.options.address\n  const amountGive = web3.utils.toWei(order.amount, 'ether')\n\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(sellOrderMaking())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n","import React from 'react';\n\nexport default function ({type}) {\n  if(type === 'table'){\n    return(<tbody className=\"spinner-border text-light text-center\"></tbody>)\n  }else{\n    return(<div className=\"spinner-border text-light text-center\"></div>)\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  filledOrdersSelector,\n  filledOrdersLoadedSelector} from '../store/selectors'\nimport Spinner from './Spinner'\n\nconst showFilledOrders = (filledOrders) =>{\n  return(\n    <tbody>\n      {filledOrders.map((order) => {\n        return(\n          <tr className={`order-${order.id}`} key={order.id}>\n            <td className='text-muted'> {order.formattedTimestamp} </td>\n            <td> {order.tokenAmount} </td>\n            <td className={`text-${order.tokenPriceClass}`}> {order.tokenPrice} </td>\n          </tr>\n        )\n      })}\n      </tbody>\n)\n}\nclass Trades extends Component {\n  render(){\n    return (\n\n      <div className=\"vertical\">\n\n            <div className=\"card bg-dark text-white\">\n              <div className=\"card-header\">\n                Trades\n              </div>\n              <div className=\"card-body\">\n                <table className=\"table table-dark table-sm small\">\n                    <thead>\n                      <tr>\n                        <th >Time</th>\n                        <th >ALEX</th>\n                        <th >ALEX/ETH</th>\n                      </tr>\n                    </thead>\n                    { this.props.filledOrdersLoaded ? showFilledOrders(this.props.filledOrders) : <Spinner type=\"table\" />}\n                  </table>\n              </div>\n            </div>\n      </div>\n\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    filledOrdersLoaded: filledOrdersLoadedSelector(state),\n    filledOrders: filledOrdersSelector(state),\n  }\n}\n\nexport default connect(mapStateToProps)(Trades)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap'\nimport {\n  orderBookSelector,\n  orderBookLoadedSelector,\n  exchangeSelector,\n  accountSelector,\n  orderFillingSelector\n} from '../store/selectors'\nimport Spinner from './Spinner'\nimport {fillOrder} from '../store/interactions'\n\nconst renderOrder = (order, props) => {\n  const {dispatch, exchange, account } = props\n\n  return(\n     <OverlayTrigger\n        key={order.id}\n        placement = 'auto'\n        overlay = {\n          <Tooltip id={order.id}>\n          {`Click here to ${order.orderFillAction}`}\n          </Tooltip>\n        }\n      >\n      <tr\n        key = {order.id}\n        className = \"order-book-order\"\n        onClick = {(e) => fillOrder(dispatch, exchange, order, account)}\n      >\n        <td> {order.tokenAmount} </td>\n        <td className={\"text-\"+order.orderTypeClass}>{order.tokenPrice}</td>\n        <td>{order.etherAmount}</td>\n      </tr>\n    </OverlayTrigger>\n  )\n}\n\n\nconst showOrderBook = (props) => {\n\n  const {orderBook} = props\n  return(\n    <tbody>\n    {orderBook.sellOrders.map((order) => renderOrder(order, props))}\n    <tr>\n      <th>ALEX</th>\n      <th>ALEX/ETH</th>\n      <th>ETH</th>\n    </tr>\n    {orderBook.buyOrders.map((order) => renderOrder(order, props))}\n    </tbody>\n  )\n}\n\n\nclass OrderBook extends Component{\n  render(){\n    console.log(this.props.showOrderBook, this.props.orderBook)\n\n    return (\n      <div className=\"vertical\">\n          <div className=\"card bg-dark text-white\">\n            <div className=\"card-header\">\n              Order book\n            </div>\n            <div className=\"card-body\">\n              <table className=\"table table-dark table-sm small\">\n              {this.props.showOrderBook ? showOrderBook(this.props) : <Spinner type='table'/>}\n              </table>\n            </div>\n          </div>\n      </div>\n\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  const orderBookLoaded = orderBookLoadedSelector(state)\n  const orderFilling = orderFillingSelector(state)\n\n\n  return {\n    orderBook: orderBookSelector(state),\n    showOrderBook: orderBookLoaded && !orderFilling,\n    exchange: exchangeSelector(state),\n    account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(OrderBook)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Tabs, Tab} from 'react-bootstrap'\nimport {\n  myFilledOrdersLoadedSelector,\n  myFilledOrdersSelector,\n  myOpenOrdersLoadedSelector,\n  myOpenOrdersSelector,\n  exchangeSelector,\n  accountSelector,\n  orderCancellingSelector\n}from '../store/selectors'\nimport {cancelOrder} from '../store/interactions'\nimport Spinner from './Spinner'\n\nconst showMyFilledOrders = (props) => {\n  const {myFilledOrders} = props\n\n  return(\n    <tbody>\n      { myFilledOrders.map((order) => {\n        return(<tr key={order.id}>\n          <td className=\"text-muted\" >{order.formattedTimestamp}</td>\n          <td className={`text-${order.orderTypeClass}`}> {order.orderSign} {order.tokenAmount}</td>\n          <td className={`text-${order.orderTypeClass}`}> {order.tokenPrice} </td>\n        </tr>)\n      })\n      }\n    </tbody>\n  )\n}\n\nconst showMyOpenOrders = (props) => {\n  const {myOpenOrders, dispatch, exchange, account} = props\n\n  return(\n    <tbody>\n      { myOpenOrders.map((order) => {\n        return(<tr key={order.id}>\n          <td className={`text-${order.orderTypeClass}`}> {order.tokenAmount}</td>\n          <td className={`text-${order.orderTypeClass}`}> {order.tokenPrice} </td>\n          <td\n            className=\"text-muted cancel-order\"\n            onClick={(e) => {\n              cancelOrder(dispatch, exchange, order, account)\n            }}\n          >X</td>\n        </tr>)\n      })\n      }\n    </tbody>\n  )\n}\n\nclass MyTransactions extends Component{\n  render(){\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          My Transactions\n        </div>\n        <div className=\"card-body\">\n          <Tabs defaultActiveKey=\"trades\" className=\"bg-dark text-white\">\n            <Tab eventKey=\"trades\" title=\"Trades\" className=\"bg-dark\">\n              <table className=\"table table-dark table-sm small\">\n                <thead>\n                  <tr>\n                    <th>Time</th>\n                    <th>ALEX</th>\n                    <th>ALEX/ETH</th>\n                  </tr>\n                </thead>\n                { this.props.showMyFilledOrders ? showMyFilledOrders(this.props) : <Spinner type=\"table\" />}\n              </table>\n            </Tab>\n            <Tab eventKey=\"orders\" title=\"Orders\">\n              <table className=\"table table-dark table-sm small\">\n                <thead>\n                  <tr>\n                    <th>Amount</th>\n                    <th>ALEX/ETH</th>\n                    <th>Cancel</th>\n                  </tr>\n                </thead>\n                { this.props.showMyOpenOrders ? showMyOpenOrders(this.props) : <Spinner type=\"table\" />}\n              </table>\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  const myOpenOrdersLoaded = myOpenOrdersLoadedSelector(state)\n  const orderCancelling = orderCancellingSelector(state)\n\n  return {\n    myFilledOrders: myFilledOrdersSelector(state),\n    showMyFilledOrders: myFilledOrdersLoadedSelector(state),\n    myOpenOrders: myOpenOrdersSelector(state),\n    showMyOpenOrders: myOpenOrdersLoaded && !orderCancelling,\n    exchange: exchangeSelector(state),\n    account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(MyTransactions)\n","export const chartOptions = {\n  chart: {\n    animations: { enabled: false },\n    toolbar: { show: false },\n    width: '100px'\n  },\n  tooltip: {\n    enabled: true,\n    theme: false,\n    style: {\n      fontSize: '12px',\n      fontFamily: undefined\n    },\n    x: {\n        show: false,\n        format: 'dd MMM',\n        formatter: undefined,\n    },\n    y: {\n      show: true,\n      title: 'price'\n    },\n    marker: {\n      show: false,\n    },\n    items: {\n       display: 'flex',\n    },\n    fixed: {\n        enabled: false,\n        position: 'topRight',\n        offsetX: 0,\n        offsetY: 0,\n    },\n  },\n  xaxis: {\n    type: 'datetime',\n    labels: {\n      show: true,\n      style: {\n          colors: '#fff',\n          fontSize: '8px',\n          cssClass: 'apexcharts-xaxis-label',\n      },\n    },\n  },\n  yaxis: {\n    labels: {\n      show: true,\n      minWidth: 0,\n      maxWidth: 160,\n      style: {\n        color: '#fff',\n        fontSize: '8px',\n        cssClass: 'apexcharts-yaxis-label',\n      },\n      offsetX: 0,\n      offsetY: 0,\n      rotate: 0,\n    }\n  }\n}\n\nexport const dummyData = [\n  {\n    data: [\n      {\n        x: new Date(1538778600000),\n        y: [6629.81, 6650.5, 6623.04, 6633.33]\n      },\n      {\n        x: new Date(1538780400000),\n        y: [6632.01, 6643.59, 6620, 6630.11]\n      },\n      {\n        x: new Date(1538782200000),\n        y: [6630.71, 6648.95, 6623.34, 6635.65]\n      },\n      {\n        x: new Date(1538784000000),\n        y: [6635.65, 6651, 6629.67, 6638.24]\n      },\n      {\n        x: new Date(1538785800000),\n        y: [6638.24, 6640, 6620, 6624.47]\n      },\n      {\n        x: new Date(1538787600000),\n        y: [6624.53, 6636.03, 6621.68, 6624.31]\n      },\n      {\n        x: new Date(1538789400000),\n        y: [6624.61, 6632.2, 6617, 6626.02]\n      },\n      {\n        x: new Date(1538791200000),\n        y: [6627, 6627.62, 6584.22, 6603.02]\n      },\n      {\n        x: new Date(1538793000000),\n        y: [6605, 6608.03, 6598.95, 6604.01]\n      },\n      {\n        x: new Date(1538794800000),\n        y: [6604.5, 6614.4, 6602.26, 6608.02]\n      },\n      {\n        x: new Date(1538796600000),\n        y: [6608.02, 6610.68, 6601.99, 6608.91]\n      },\n      {\n        x: new Date(1538798400000),\n        y: [6608.91, 6618.99, 6608.01, 6612]\n      },\n      {\n        x: new Date(1538800200000),\n        y: [6612, 6615.13, 6605.09, 6612]\n      },\n      {\n        x: new Date(1538802000000),\n        y: [6612, 6624.12, 6608.43, 6622.95]\n      },\n      {\n        x: new Date(1538803800000),\n        y: [6623.91, 6623.91, 6615, 6615.67]\n      },\n      {\n        x: new Date(1538805600000),\n        y: [6618.69, 6618.74, 6610, 6610.4]\n      },\n      {\n        x: new Date(1538807400000),\n        y: [6611, 6622.78, 6610.4, 6614.9]\n      },\n      {\n        x: new Date(1538809200000),\n        y: [6614.9, 6626.2, 6613.33, 6623.45]\n      },\n      {\n        x: new Date(1538811000000),\n        y: [6623.48, 6627, 6618.38, 6620.35]\n      },\n      {\n        x: new Date(1538812800000),\n        y: [6619.43, 6620.35, 6610.05, 6615.53]\n      },\n      {\n        x: new Date(1538814600000),\n        y: [6615.53, 6617.93, 6610, 6615.19]\n      },\n      {\n        x: new Date(1538816400000),\n        y: [6615.19, 6621.6, 6608.2, 6620]\n      },\n      {\n        x: new Date(1538818200000),\n        y: [6619.54, 6625.17, 6614.15, 6620]\n      },\n      {\n        x: new Date(1538820000000),\n        y: [6620.33, 6634.15, 6617.24, 6624.61]\n      },\n      {\n        x: new Date(1538821800000),\n        y: [6625.95, 6626, 6611.66, 6617.58]\n      },\n      {\n        x: new Date(1538823600000),\n        y: [6619, 6625.97, 6595.27, 6598.86]\n      },\n      {\n        x: new Date(1538825400000),\n        y: [6598.86, 6598.88, 6570, 6587.16]\n      },\n      {\n        x: new Date(1538827200000),\n        y: [6588.86, 6600, 6580, 6593.4]\n      },\n      {\n        x: new Date(1538829000000),\n        y: [6593.99, 6598.89, 6585, 6587.81]\n      },\n      {\n        x: new Date(1538830800000),\n        y: [6587.81, 6592.73, 6567.14, 6578]\n      },\n      {\n        x: new Date(1538832600000),\n        y: [6578.35, 6581.72, 6567.39, 6579]\n      },\n      {\n        x: new Date(1538834400000),\n        y: [6579.38, 6580.92, 6566.77, 6575.96]\n      },\n      {\n        x: new Date(1538836200000),\n        y: [6575.96, 6589, 6571.77, 6588.92]\n      },\n      {\n        x: new Date(1538838000000),\n        y: [6588.92, 6594, 6577.55, 6589.22]\n      },\n      {\n        x: new Date(1538839800000),\n        y: [6589.3, 6598.89, 6589.1, 6596.08]\n      },\n      {\n        x: new Date(1538841600000),\n        y: [6597.5, 6600, 6588.39, 6596.25]\n      },\n      {\n        x: new Date(1538843400000),\n        y: [6598.03, 6600, 6588.73, 6595.97]\n      },\n      {\n        x: new Date(1538845200000),\n        y: [6595.97, 6602.01, 6588.17, 6602]\n      },\n      {\n        x: new Date(1538847000000),\n        y: [6602, 6607, 6596.51, 6599.95]\n      },\n      {\n        x: new Date(1538848800000),\n        y: [6600.63, 6601.21, 6590.39, 6591.02]\n      },\n      {\n        x: new Date(1538850600000),\n        y: [6591.02, 6603.08, 6591, 6591]\n      },\n      {\n        x: new Date(1538852400000),\n        y: [6591, 6601.32, 6585, 6592]\n      },\n      {\n        x: new Date(1538854200000),\n        y: [6593.13, 6596.01, 6590, 6593.34]\n      },\n      {\n        x: new Date(1538856000000),\n        y: [6593.34, 6604.76, 6582.63, 6593.86]\n      },\n      {\n        x: new Date(1538857800000),\n        y: [6593.86, 6604.28, 6586.57, 6600.01]\n      },\n      {\n        x: new Date(1538859600000),\n        y: [6601.81, 6603.21, 6592.78, 6596.25]\n      },\n      {\n        x: new Date(1538861400000),\n        y: [6596.25, 6604.2, 6590, 6602.99]\n      },\n      {\n        x: new Date(1538863200000),\n        y: [6602.99, 6606, 6584.99, 6587.81]\n      },\n      {\n        x: new Date(1538865000000),\n        y: [6587.81, 6595, 6583.27, 6591.96]\n      },\n      {\n        x: new Date(1538866800000),\n        y: [6591.97, 6596.07, 6585, 6588.39]\n      },\n      {\n        x: new Date(1538868600000),\n        y: [6587.6, 6598.21, 6587.6, 6594.27]\n      },\n      {\n        x: new Date(1538870400000),\n        y: [6596.44, 6601, 6590, 6596.55]\n      },\n      {\n        x: new Date(1538872200000),\n        y: [6598.91, 6605, 6596.61, 6600.02]\n      },\n      {\n        x: new Date(1538874000000),\n        y: [6600.55, 6605, 6589.14, 6593.01]\n      },\n      {\n        x: new Date(1538875800000),\n        y: [6593.15, 6605, 6592, 6603.06]\n      },\n      {\n        x: new Date(1538877600000),\n        y: [6603.07, 6604.5, 6599.09, 6603.89]\n      },\n      {\n        x: new Date(1538879400000),\n        y: [6604.44, 6604.44, 6600, 6603.5]\n      },\n      {\n        x: new Date(1538881200000),\n        y: [6603.5, 6603.99, 6597.5, 6603.86]\n      },\n      {\n        x: new Date(1538883000000),\n        y: [6603.85, 6605, 6600, 6604.07]\n      },\n      {\n        x: new Date(1538884800000),\n        y: [6604.98, 6606, 6604.07, 6606]\n      },\n    ]\n  }\n]\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Chart from 'react-apexcharts'\nimport Spinner from './Spinner'\nimport {chartOptions} from './PriceChart.config'\nimport {\n  priceChartSelector,\n  priceChartLoadedSelector\n} from '../store/selectors'\n\nconst priceSymbol = (lastPriceChange) => {\n  let output\n  if(lastPriceChange === '+'){\n    output = <span className='text-success'>&#9650;</span>\n  }else{\n    output = <span className='text-danger'>&#9650;</span>\n  }\n  return(output)\n}\n\nconst showPriceChart = (priceChart) => {\n  return(\n    <div className=\"price-chart\">\n      <div className = \"price\">\n        <h4> ALEX/ETH &nbsp; {priceSymbol(priceChart.lastPriceChange)} &nbsp; {priceChart.lastPrice}</h4>\n      </div>\n      <Chart options={chartOptions} series={priceChart.series} type='candlestick' width='100%' height='100%' />\n    </div>\n  )\n}\n\nclass PriceChart extends Component{\n  render(){\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          PriceChart\n        </div>\n        <div className=\"card-body\">\n          {this.props.priceChartLoaded ? showPriceChart(this.props.priceChart) : <Spinner /> }\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n\n  return {\n    priceChartLoaded: priceChartLoadedSelector(state),\n    priceChart: priceChartSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(PriceChart)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { loadBalances,\n          depositEther,\n          withdrawEther,\n          depositToken,\n          withdrawToken\n        } from '../store/interactions'\nimport { Tabs, Tab} from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport {\n  web3Selector,\n  exchangeSelector,\n  tokenSelector,\n  accountSelector,\n  etherBalanceSelector,\n  tokenBalanceSelector,\n  exchangeEtherBalanceSelector,\n  exchangeTokenBalanceSelector,\n  balancesLoadingSelector,\n  etherDepositAmountSelector,\n  etherWithdrawAmountSelector,\n  tokenDepositAmountSelector,\n  tokenWithdrawAmountSelector\n} from '../store/selectors'\n\nimport {\n  etherDepositAmountChanged,\n  etherWithdrawAmountChanged,\n  tokenDepositAmountChanged,\n  tokenWithdrawAmountChanged\n} from '../store/actions'\n\nconst showForm = (props) => {\n  const {\n    etherBalance,\n    tokenBalance,\n    exchangeEtherBalance,\n    exchangeTokenBalance,\n    dispatch,\n    etherDepositAmount,\n    etherWithdrawAmount,\n    exchange,\n    token,\n    account,\n    web3,\n    tokenDepositAmount,\n    tokenWithdrawAmount\n  } = props\n\n  return(\n    <Tabs defaultActiveKey=\"deposit\" className=\"bg-dark text-white\">\n\n      <Tab eventKey=\"deposit\" title=\"Deposit\" className=\"bg-dark\">\n        <table className=\"table table-dark table-sm small\">\n          <thead>\n            <tr>\n              <th> Token </th>\n              <th> Wallet </th>\n              <th> Exchange </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td> ETH </td>\n              <td> {etherBalance} </td>\n              <td> {exchangeEtherBalance} </td>\n            </tr>\n          </tbody>\n        </table>\n\n          <form className=\"row\" onSubmit={(event) => {\n            event.preventDefault()\n            depositEther(dispatch, exchange, web3, etherDepositAmount, account)\n          }}>\n            <div className= \"col-12 col-sm pr-sm2\">\n              <input\n              type=\"text\"\n              placeholder=\"ETH Amount\"\n              onChange={(e) => dispatch(etherDepositAmountChanged(e.target.value))}\n              className=\"form-control form-control-sm bg-dark text-white\"\n              required />\n            </div>\n            <div className=\"col-12 col-sm-auto pl-sm-0\">\n              <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\"> Deposit </button>\n            </div>\n          </form>\n\n        <table className=\"table table-dark table-sm small\">\n          <tbody>\n            <tr>\n              <td> ALEX </td>\n              <td> {tokenBalance} </td>\n              <td> {exchangeTokenBalance} </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form className=\"row\" onSubmit={(event) => {\n          event.preventDefault()\n          depositToken(dispatch, exchange, web3, token, tokenDepositAmount, account)\n        }}>\n          <div className= \"col-12 col-sm pr-sm2\">\n            <input\n            type=\"text\"\n            placeholder=\"ALEX Amount\"\n            onChange={(e) => dispatch(tokenDepositAmountChanged(e.target.value))}\n            className=\"form-control form-control-sm bg-dark text-white\"\n            required />\n          </div>\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\n            <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\"> Deposit </button>\n          </div>\n        </form>\n\n      </Tab>\n\n      <Tab eventKey=\"withdraw\" title=\"Withdraw\" className=\"bg-dark\">\n        <table className=\"table table-dark table-sm small\">\n          <thead>\n            <tr>\n              <th> Token </th>\n              <th> Wallet </th>\n              <th> Exchange </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td> ETH </td>\n              <td> {etherBalance} </td>\n              <td> {exchangeEtherBalance} </td>\n            </tr>\n          </tbody>\n        </table>\n\n          <form className=\"row\" onSubmit={(event) => {\n            event.preventDefault()\n            withdrawEther(dispatch, exchange, web3, etherWithdrawAmount, account)\n            console.log(\"form submitting\");\n          }}>\n            <div className= \"col-12 col-sm pr-sm2\">\n              <input\n              type=\"text\"\n              placeholder=\"ETH Amount\"\n              onChange={(e) => dispatch(etherWithdrawAmountChanged(e.target.value))}\n              className=\"form-control form-control-sm bg-dark text-white\"\n              required />\n            </div>\n            <div className=\"col-12 col-sm-auto pl-sm-0\">\n              <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\"> Withdraw </button>\n            </div>\n          </form>\n        <table className=\"table table-dark table-sm small\">\n          <tbody>\n            <tr>\n              <td> ALEX </td>\n              <td> {tokenBalance} </td>\n              <td> {exchangeTokenBalance} </td>\n            </tr>\n          </tbody>\n\n        </table>\n        <form className=\"row\" onSubmit={(event) => {\n          event.preventDefault()\n          withdrawToken(dispatch, exchange, web3, token, tokenWithdrawAmount, account)\n          console.log(\"form submitting\");\n        }}>\n          <div className= \"col-12 col-sm pr-sm2\">\n            <input\n            type=\"text\"\n            placeholder=\"ALEX Amount\"\n            onChange={(e) => dispatch(tokenWithdrawAmountChanged(e.target.value))}\n            className=\"form-control form-control-sm bg-dark text-white\"\n            required />\n          </div>\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\n            <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\"> Withdraw </button>\n          </div>\n        </form>\n      </Tab>\n    </Tabs>\n  )\n}\n\n\nclass Balance extends Component{\n  componentWillMount(){\n    this.loadBlockchainData()\n  }\n\n  async loadBlockchainData(props) {\n    const {dispatch, web3, exchange, token, account} = this.props\n\n    await loadBalances(dispatch, web3, exchange, token, account)\n  }\n\n\n  render(){\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          Balance\n        </div>\n        <div className=\"card-body\">\n            {this.props.showForm ? showForm(this.props) : <Spinner />}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  const balancesLoading = balancesLoadingSelector(state)\n\n  return {\n    account: accountSelector(state),\n    exchange: exchangeSelector(state),\n    token: tokenSelector(state),\n    web3: web3Selector(state),\n    etherBalance: etherBalanceSelector(state),\n    tokenBalance: tokenBalanceSelector(state),\n    exchangeEtherBalance: exchangeEtherBalanceSelector(state),\n    exchangeTokenBalance: exchangeTokenBalanceSelector(state),\n    balancesLoading,\n    showForm: !balancesLoading,\n    etherDepositAmount: etherDepositAmountSelector(state),\n    etherWithdrawAmount: etherWithdrawAmountSelector(state),\n    tokenDepositAmount: tokenDepositAmountSelector(state),\n    tokenWithdrawAmount: tokenWithdrawAmountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(Balance)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {Tabs, Tab} from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport {\n  exchangeSelector,\n  tokenSelector,\n  accountSelector,\n  web3Selector,\n  buyOrderSelector,\n  sellOrderSelector\n} from '../store/selectors'\nimport {\n  buyOrderAmountChanged,\n  buyOrderPriceChanged,\n  sellOrderAmountChanged,\n  sellOrderPriceChanged\n} from '../store/actions'\nimport {\n  makeBuyOrder,\n  makeSellOrder\n} from '../store/interactions'\n\nconst showForm = (props) => {\n  const {\n    dispatch,\n    buyOrder,\n    exchange,\n    token,\n    web3,\n    account,\n    sellOrder,\n    showBuyTotal,\n    showSellTotal\n  } = props\n\n    return (\n      <Tabs defaultActiveKey=\"buy\" className=\"bg-dark text-white\">\n\n        <Tab eventKey=\"buy\" title=\"Buy\" className=\"bg-dark\">\n\n            <form onSubmit={(event) => {\n              event.preventDefault()\n              makeBuyOrder(dispatch, exchange, token, web3, buyOrder, account)\n            }}>\n            <div className=\"form-group small\">\n              <label>Buy Amount (ALEX)</label>\n              <div className=\"input-group\">\n                <input\n                  type=\"text\"\n                  className=\"form-control form-control-sm bg-dark text-white\"\n                  placeholder=\"Buy Amount\"\n                  onChange={(e) => dispatch( buyOrderAmountChanged( e.target.value ) )}\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"form-group small\">\n              <label>Buy Price</label>\n              <div className=\"input-group\">\n                <input\n                  type=\"text\"\n                  className=\"form-control form-control-sm bg-dark text-white\"\n                  placeholder=\"Buy Price\"\n                  onChange={(e) => dispatch( buyOrderPriceChanged( e.target.value ) )}\n                  required\n                />\n              </div>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block\">Buy Order</button>\n            { showBuyTotal ? <small>Total: {buyOrder.amount * buyOrder.price} ETH</small> : null }\n          </form>\n\n        </Tab>\n\n        <Tab eventKey=\"sell\" title=\"Sell\" className=\"bg-dark\">\n          <form onSubmit={(event) => {\n            event.preventDefault()\n            makeSellOrder(dispatch, exchange, token, web3, sellOrder, account)\n          }}>\n          <div className=\"form-group small\">\n            <label>Buy Sell (ALEX)</label>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control form-control-sm bg-dark text-white\"\n                placeholder=\"Sell amount\"\n                onChange={(e) => dispatch( sellOrderAmountChanged( e.target.value ) )}\n                required\n              />\n            </div>\n          </div>\n          <div className=\"form-group small\">\n            <label>Sell Price</label>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control form-control-sm bg-dark text-white\"\n                placeholder=\"Sell Price\"\n                onChange={(e) => dispatch( sellOrderPriceChanged( e.target.value ) )}\n                required\n              />\n            </div>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block\">Sell Order</button>\n          { showSellTotal ? <small>Total: {sellOrder.amount * sellOrder.price} ETH</small> : null }\n        </form>\n\n        </Tab>\n      </Tabs>\n    )\n\n}\n\nclass NewOrder extends Component {\n\n  render() {\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          New Order\n        </div>\n        <div className=\"card-body\">\n          {this.props.showForm ? showForm(this.props) : <Spinner />}\n        </div>\n      </div>\n    )\n  }\n}\n\n\nfunction mapStateToProps(state){\n  const buyOrder = buyOrderSelector(state)\n  const sellOrder = sellOrderSelector(state)\n\n  return {\n    account: accountSelector(state),\n    exchange: exchangeSelector(state),\n    token: tokenSelector(state),\n    web3: web3Selector(state),\n    buyOrder: buyOrder,\n    sellOrder: sellOrder,\n    showForm: !buyOrder.making && !sellOrder.making,\n    showBuyTotal: buyOrder.amount && buyOrder.price,\n    showSellTotal: sellOrder.amount && sellOrder.price\n  }\n}\n\nexport default connect(mapStateToProps)(NewOrder)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { loadAllOrders, subscribeToEvents } from '../store/interactions'\nimport { exchangeSelector } from '../store/selectors'\nimport Trades  from './Trades'\nimport OrderBook from './OrderBook'\nimport MyTransactions from './MyTransactions'\nimport PriceChart from './PriceChart'\nimport Balance from './Balance'\nimport NewOrder from './NewOrder'\n\nclass Content extends Component {\n  componentDidMount(){\n    this.loadBlockchainData(this.props)\n  }\n\n  async loadBlockchainData(props) {\n    const {exchange, dispatch} = props\n\n    await loadAllOrders(exchange, dispatch)\n    await subscribeToEvents(exchange, dispatch)\n  }\n\n  render(){\n  return(\n    <div className=\"content\">\n      <div className=\"vertical-split\">\n        <Balance />\n        <NewOrder />\n      </div>\n      <OrderBook />\n      <div className=\"vertical-split\">\n        <PriceChart />\n        <MyTransactions />\n      </div>\n      <Trades />\n\n    </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    exchange: exchangeSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(Content)\n","import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\nimport Content from './Content'\nimport {connect} from 'react-redux'\nimport {loadWeb3,\n        loadAccount,\n        loadToken,\n        loadExchange\n    } from '../store/interactions'\nimport { contractsLoadedSelector } from '../store/selectors'\n\n\nclass App extends Component {\n  componentWillMount(){\n    this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    const web3 = await loadWeb3(dispatch)\n    const networkId = await web3.eth.net.getId()\n    await loadAccount(web3, dispatch)\n    const token = await loadToken(web3, networkId, dispatch)\n    if(!token){\n      window.alert('Token smart contract not detected on the current network. Please select another with Metamask.')\n      return\n   }\n   const exchange = loadExchange(web3, networkId, dispatch)\n   if(!exchange){\n     window.alert('Exchange smart contract not detected on the current network. Please select another with Metamask.')\n   }\n\n  }\n  render(){\n    return(\n      <div>\n        <Navbar />\n        {this.props.contractsLoaded ? <Content /> : <div className=\"content\"> </div>}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    contractsLoaded: contractsLoadedSelector(state),\n  }\n}\n\n//Connect app to Redux\nexport default connect(mapStateToProps)(App)\n","import { combineReducers } from 'redux';\n\nfunction web3(state = {}, action) {\n  switch (action.type) {\n    case 'WEB3_LOADED':\n      return { ...state,  connection: action.connection }\n    case 'WEB3_ACCOUNT_LOADED':\n      return { ...state, account: action.account }\n    case 'ETHER_BALANCE_LOADED':\n      return { ...state, balance: action.balance }\n    default:\n      return state\n  }\n}\nfunction token(state = {}, action) {\n  switch (action.type) {\n    case 'TOKEN_LOADED':\n      return { ...state, loaded: true, contract: action.contract }\n    case 'TOKEN_BALANCE_LOADED':\n      return { ...state, balance: action.balance }\n    default:\n      return state\n  }\n}\n\n\nfunction exchange(state = {}, action) {\n  let index, data\n\n  switch (action.type) {\n    case 'EXCHANGE_LOADED':\n      return {...state, loaded:true, contract: action.contract}\n    case 'CANCELLED_ORDERS_LOADED':\n      return {...state, cancelledOrders: {loaded:true, data:action.cancelledOrders}}\n    case 'FILLED_ORDERS_LOADED':\n      return {...state, filledOrders: {loaded:true, data:action.filledOrders}}\n    case 'ALL_ORDERS_LOADED':\n      return {...state, allOrders: {loaded:true, data:action.allOrders}}\n    case 'ORDER_CANCELLING':\n      return {...state, orderCancelling:true}\n    case 'ORDER_CANCELLED':\n      return{\n        ...state,\n        orderCancelling:false,\n        cancelledOrders: {\n          ...state.cancelledOrders,\n          data: [\n            ...state.cancelledOrders.data,\n            action.order\n          ]\n        }\n      }\n    case 'ORDER_FILLING':\n      return {...state, orderFilling:true}\n\n    case 'ORDER_FILLED':\n\n      // Prevent duplicate orders\n      index = state.filledOrders.data.findIndex(order => order.id === action.order.id);\n\n      if(index === -1) {\n        data = [...state.filledOrders.data, action.order]\n      } else {\n        data = state.filledOrders.data\n      }\n\n      return {\n        ...state,\n        orderFilling: false,\n        filledOrders: {\n          ...state.filledOrders,\n          data\n        }\n      }\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\n        return {...state, etherBalance: action.balance}\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n        return {...state, tokenBalance: action.balance}\n    case 'BALANCES_LOADING':\n        return {...state, balancesLoading:true}\n    case 'BALANCES_LOADED':\n        return {...state, balancesLoading:false}\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n        return {...state, etherDepositAmount:action.amount}\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n        return {...state, etherWithdrawAmount:action.amount}\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n        return {...state, tokenDepositAmount:action.amount}\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n        return {...state, tokenWithdrawAmount:action.amount}\n\n    case 'BUY_ORDER_AMOUNT_CHANGED':\n      return { ...state, buyOrder: { ...state.buyOrder, amount: action.amount } }\n    case 'BUY_ORDER_PRICE_CHANGED':\n      return { ...state, buyOrder: { ...state.buyOrder, price: action.price } }\n    case 'BUY_ORDER_MAKING':\n      return { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true } }\n\n    case 'ORDER_MADE':\n      // Prevent duplicate orders\n      index = state.allOrders.data.findIndex(order => order.id === action.order.id);\n\n      if(index === -1) {\n        data = [...state.allOrders.data, action.order]\n      } else {\n        data = state.allOrders.data\n      }\n\n      return {\n        ...state,\n        allOrders: {\n          ...state.allOrders,\n          data\n        },\n        buyOrder: {\n          ...state.buyOrder,\n          making: false\n        },\n        sellOrder: {\n          ...state.sellOrder,\n          making: false\n        }\n      }\n\n    case 'SELL_ORDER_AMOUNT_CHANGED':\n      return { ...state, sellOrder: { ...state.sellOrder, amount: action.amount } }\n    case 'SELL_ORDER_PRICE_CHANGED':\n      return { ...state, sellOrder: { ...state.sellOrder, price: action.price } }\n    case 'SELL_ORDER_MAKING':\n      return { ...state, sellOrder: { ...state.sellOrder, amount: null, price: null, making: true } }\n\n    default:\n      return state\n  }\n\n}\n\nconst rootReducer = combineReducers({\n  web3: web3,\n  token:token,\n  exchange:exchange\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\n\nconst loggerMiddleware = createLogger()\nconst middleware = []\n\n//For redux dev tools\nconst composeEnhancers = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose\n\nexport default function configureStore(preLoadedState){\n  return createStore(\n    rootReducer,\n    preLoadedState,\n    composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App'\nimport configureStore from './store/configureStore'\nimport reportWebVitals from './reportWebVitals'\n\n\nReactDOM.render(\n    <Provider store = {configureStore()}>\n    <App />\n    </Provider>,\n   document.getElementById('root')\n )\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}